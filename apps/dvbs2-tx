#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# SPDX-License-Identifier: GPL-3.0
#
# DVB-S2 Transmitter

import signal
import sys
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from math import pi, sqrt

import pmt
from gnuradio import analog
from gnuradio import blocks
from gnuradio import dtv
from gnuradio import eng_notation
from gnuradio import filter
from gnuradio import gr
from gnuradio import uhd
from gnuradio.eng_arg import eng_float, intx
from gnuradio.filter import firdes

import dvbs2rx


class dvbs2_tx(gr.top_block):
    def __init__(self, options):
        gr.top_block.__init__(self, "DVB-S2 Tx", catch_exceptions=True)

        ##################################################
        # Parameters
        ##################################################
        self.frame_size = options.frame_size
        self.freq = options.freq
        self.freq_offset = options.freq_offset
        self.gold_code = options.gold_code
        self.in_fd = options.in_fd
        self.in_file = options.in_file
        self.in_repeat = options.in_repeat
        self.out_iq_format = options.out_iq_format
        self.modcod = options.modcod
        self.out_fd = options.out_fd
        self.out_file = options.out_file
        self.pilots = options.pilots
        self.rolloff = options.rolloff
        self.rrc_delay = options.rrc_delay
        self.sink = options.sink
        self.snr = options.snr
        self.source = options.source
        self.sps = options.sps
        self.sym_rate = options.sym_rate
        self.usrp_addr = options.usrp_addr
        self.usrp_antenna = options.usrp_antenna
        self.usrp_gain = options.usrp_gain

        ##################################################
        # Variables
        ##################################################
        code_rate = self.modcod.upper().replace("8PSK", "").replace("QPSK", "")
        self.code_rate = code_rate
        self.samp_rate = self.sym_rate * self.sps
        self.constellation = self.modcod.replace(code_rate, "")

        ##################################################
        # Flowgraph
        ##################################################
        source_block = self.connect_source()
        sink_block = self.connect_sink()
        self.connect_dvbs2tx(source_block, sink_block)

    def connect_source(self):
        """Connect the MPEG TS source

        Returns:
            block: Last block object on the source pipeline, which should
            connect to the DVB-S2 Tx input.
        """
        if (self.source == "fd"):
            source = blocks.file_descriptor_source(gr.sizeof_char, self.in_fd,
                                                   False)
        elif (self.source == "file"):
            source = blocks.file_source(gr.sizeof_char, self.in_file,
                                        self.in_repeat)
            source.set_begin_tag(pmt.PMT_NIL)
        return source

    def connect_sink(self):
        """Connect the IQ sample Sink

        Returns:
            block: First block on the sink pipeline, which should connect to
            the DVB-S2 Tx output.
        """

        if (self.sink == "fd" or self.sink == "file"):
            # First block on the pipeline
            sink = throttle = blocks.throttle(gr.sizeof_gr_complex,
                                              self.samp_rate, True)

            out_size = gr.sizeof_char if self.out_iq_format == "u8" else \
                gr.sizeof_gr_complex

            if (self.sink == "fd"):
                file_or_fd_sink = blocks.file_descriptor_sink(
                    out_size, self.out_fd)
            else:
                file_or_fd_sink = blocks.file_sink(out_size, self.out_file)

            if (self.out_iq_format == "u8"):
                # Convert the complex stream into an interleaved uchar stream.
                complex_to_float_0 = blocks.complex_to_float(1)
                multiply_const_0 = blocks.multiply_const_ff(128)
                multiply_const_1 = blocks.multiply_const_ff(128)
                add_const_0 = blocks.add_const_ff(127)
                add_const_1 = blocks.add_const_ff(127)
                float_to_uchar_0 = blocks.float_to_uchar()
                float_to_uchar_1 = blocks.float_to_uchar()
                interleaver = blocks.interleave(gr.sizeof_char, 1)
                self.connect((throttle, 0), (complex_to_float_0, 0))
                self.connect((complex_to_float_0, 0), (multiply_const_0, 0))
                self.connect((complex_to_float_0, 1), (multiply_const_1, 0))
                self.connect((multiply_const_0, 0), (add_const_0, 0),
                             (float_to_uchar_0, 0), (interleaver, 0))
                self.connect((multiply_const_1, 0), (add_const_1, 0),
                             (float_to_uchar_1, 0), (interleaver, 1))
                self.connect((interleaver, 0), (file_or_fd_sink, 0))
            else:
                self.connect((throttle, 0), (file_or_fd_sink, 0))

        elif (self.sink == "usrp"):
            sink = uhd.usrp_sink(
                ",".join((self.usrp_addr, '')),
                uhd.stream_args(
                    cpu_format="fc32",
                    args='',
                    channels=list(range(0, 1)),
                ),
                "",
            )
            sink.set_samp_rate(self.samp_rate)
            sink.set_time_unknown_pps(uhd.time_spec(0))
            sink.set_center_freq(self.freq, 0)
            sink.set_antenna(self.usrp_antenna, 0)
            sink.set_gain(self.usrp_gain, 0)

        # Simulation options
        # 1) Noise
        if (self.snr is not None):
            Es = 1
            EsN0_db = self.snr
            EsN0 = 10**(EsN0_db / 10)
            N0 = Es / EsN0
            noise_source = analog.noise_source_c(analog.GR_GAUSSIAN,
                                                 sqrt(N0 * self.sps), 0)
            add_block = blocks.add_vcc(1)
            self.connect((noise_source, 0), (add_block, 1))
            self.connect((add_block, 0), (sink, 0))
            sink = add_block  # new first block on the sink pipeline

        # 2) Frequency offset
        if (self.freq_offset is not None):
            rotator_cc_0_0 = blocks.rotator_cc(
                2 * pi * (self.freq_offset / self.samp_rate), False)
            self.connect((rotator_cc_0_0, 0), (sink, 0))
            sink = rotator_cc_0_0  # new first block on the sink pipeline

        return sink

    def connect_dvbs2tx(self, source_block, sink_block):
        """Connect the DVB-S2 Tx Pipeline

        Implement the following pipeline:

        BBFRAME Processing -> BCH Enc. -> LDPC Enc. -> Interleaver ->|
                                                                    |
                                                                    |
        <- Interpolator/Filter <- PL Framer <- Modulator (Mapping) <-|

        Args:
            source_block : The block providing IQ samples into the DVB-S2 Rx.
            sink_block : The block consuming the MPEG TS output stream.


        """

        translated_params = dvbs2rx.params.translate('DVB-S2', self.frame_size,
                                                     self.code_rate,
                                                     self.constellation,
                                                     self.rolloff, self.pilots)
        (standard, frame_size, code_rate, constellation, rolloff,
         pilots) = translated_params

        bbheader = dtv.dvb_bbheader_bb(standard, frame_size, code_rate,
                                       rolloff, dtv.INPUTMODE_NORMAL,
                                       dtv.INBAND_OFF, 168, 4000000)
        bbscrambler = dtv.dvb_bbscrambler_bb(standard, frame_size, code_rate)
        bch_encoder = dtv.dvb_bch_bb(standard, frame_size, code_rate)
        ldpc_encoder = dtv.dvb_ldpc_bb(standard, frame_size, code_rate,
                                       dtv.MOD_OTHER)
        interleaver = dtv.dvbs2_interleaver_bb(frame_size, code_rate,
                                               constellation)
        xfecframe_mapper = dtv.dvbs2_modulator_bc(frame_size, code_rate,
                                                  constellation,
                                                  dtv.INTERPOLATION_OFF)
        pl_framer = dtv.dvbs2_physical_cc(frame_size, code_rate, constellation,
                                          pilots, 0)

        self.connect((source_block, 0), (bbheader, 0), (bbscrambler, 0),
                     (bch_encoder, 0), (ldpc_encoder, 0), (interleaver, 0),
                     (xfecframe_mapper, 0), (pl_framer, 0))

        # The PL framer outputs an unfiltered sequence upsampled by 2 (i.e., a
        # zero-interpolated sequence). Hence, upsample the remaining ratio
        # (sps/2) to achieve an overall oversampling of sps samples per symbol.
        interp_sps = self.sps / 2  # remaining ratio

        # Use the polyphase arbitrary resampler if the remaining interpolation
        # ratio is fractional. Otherwise, use the conventional integer-factor
        # interpolating FIR filter for better performance.
        if (interp_sps.is_integer()):
            # The RRC taps must be designed for an oversampling of sps (the
            # overall ratio) but the filter block should apply an upsampling of
            # only "sps/2" given the PL framer already upsamples by 2.
            ntaps = int(2 * self.rrc_delay * self.sps) + 1
            rrc_taps = firdes.root_raised_cosine(
                self.sps,  # gain (has to be equal to the total interp factor)
                self.sps,  # overall oversampling ratio
                1.0,  # symbol rate
                self.rolloff,
                ntaps)
            interp_filter = filter.interp_fir_filter_ccf(
                int(interp_sps), rrc_taps)
            self.connect((pl_framer, 0), (interp_filter, 0))
        else:
            # The polyphase arbitrary resampler does not work well with the
            # upsampled sequence produced by the PL framer. Hence, first, undo
            # the PL framer's upsampling (downsample by 2). Then, interpolate
            # the resulting symbol-spaced sequence by the full sps ratio.
            downsampler = blocks.keep_m_in_n(gr.sizeof_gr_complex, 1, 2, 0)
            nfilts = 32  # typically enough for low quantization error
            ntaps = int(2 * nfilts * self.rrc_delay * self.sps) + 1
            rrc_taps = filter.firdes.root_raised_cosine(
                nfilts,  # gain (has to be equal to the number of pfb branches)
                nfilts,  # sampling rate based on 32 filters in resampler
                1.0,  # symbol rate
                self.rolloff,
                ntaps)
            interp_filter = filter.pfb_arb_resampler_ccf(self.sps, rrc_taps)
            self.connect((pl_framer, 0), (downsampler, 0), (interp_filter, 0))

        # The PL framer does not declare a delay due to its upsampling-by-2
        # operation. Hence, consider the total oversampling ratio when
        # declaring the interpolator's delay below. Also, note the same delay
        # applies to both the polyphase and non-polyphase resamplers.
        interp_filter.declare_sample_delay(int(self.rrc_delay * self.sps))

        self.connect((interp_filter, 0), (sink_block, 0))


def argument_parser():
    description = 'DVB-S2 Transmitter'
    parser = ArgumentParser(prog="dvbs2-tx",
                            description=description,
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument("--frame-size",
                        type=str,
                        choices=['normal', 'short'],
                        default='normal',
                        help="FECFRAME size")
    parser.add_argument("-f",
                        "--freq",
                        type=eng_float,
                        default=eng_notation.num_to_str(float(1e9)),
                        help="Carrier or intermediate frequency in Hz")
    parser.add_argument("--gold-code", type=intx, default=0, help="Gold code")
    parser.add_argument("-m",
                        "--modcod",
                        type=str,
                        default='QPSK1/4',
                        help="MODCOD")
    parser.add_argument("--pilots",
                        action='store_true',
                        default=False,
                        help="Include pilot blocks on the PLFRAMEs")
    parser.add_argument("-r",
                        "--rolloff",
                        choices=[0.35, 0.25, 0.2],
                        type=eng_float,
                        default=eng_notation.num_to_str(float(0.2)),
                        help="Rolloff factor")
    parser.add_argument("--rrc-delay",
                        type=intx,
                        default=50,
                        help="RRC filter delay in symbol periods")
    parser.add_argument("-o",
                        "--sps",
                        type=eng_float,
                        default=eng_notation.num_to_str(float(2)),
                        help="Oversampling ratio in samples per symbol")
    parser.add_argument("-s",
                        "--sym-rate",
                        type=eng_float,
                        default=eng_notation.num_to_str(float(1000000)),
                        help="Symbol rate in bauds")

    src_group = parser.add_argument_group('Source Options')
    src_group.add_argument("--source",
                           choices=["fd", "file"],
                           default="fd",
                           help="Source of the input MPEG transport stream")
    src_group.add_argument("--in-fd",
                           type=intx,
                           default=0,
                           help="Input file descriptor used if source=fd")
    src_group.add_argument("--in-file",
                           type=str,
                           help="Input file used if source=file")
    src_group.add_argument(
        "--in-repeat",
        action='store_true',
        default=False,
        help="Read repeatedly from the input file if source=file")

    snk_group = parser.add_argument_group('Sink Options')
    snk_group.add_argument("--sink",
                           choices=["fd", "file", "usrp"],
                           default="fd",
                           help="Sink for the output IQ sample stream")
    snk_group.add_argument("--out-fd",
                           type=intx,
                           default=1,
                           help="Output file descriptor used if sink=fd")
    snk_group.add_argument("--out-file",
                           type=str,
                           help="Output file used if sink=file")
    snk_group.add_argument("--out-iq-format",
                           choices=['fc32', 'u8'],
                           default='fc32',
                           help="Output IQ format")

    usrp_group = parser.add_argument_group('USRP Options')
    usrp_group.add_argument("--usrp-addr", type=str, help="USRP address")
    usrp_group.add_argument("--usrp-antenna",
                            type=str,
                            default="TX/RX",
                            help="USRP antenna")
    usrp_group.add_argument("--usrp-gain",
                            type=float,
                            default=0,
                            help="USRP Tx gain")

    sim_group = parser.add_argument_group('Simulation Options')
    sim_group.add_argument(
        "--snr",
        type=eng_float,
        help="Signal-to-noise ratio to simulate on the output stream")
    sim_group.add_argument(
        "--freq-offset",
        type=eng_float,
        help="Frequency offset in Hz to simulate on the output stream")

    options = parser.parse_args()

    if (options.sink == "usrp" and options.usrp_addr is None):
        parser.error("argument --usrp-addr is required when --sink=\"usrp\"")

    return options


def main():
    options = argument_parser()
    tb = dvbs2_tx(options)

    def sig_handler(sig=None, frame=None):
        tb.stop()
        tb.wait()

        sys.exit(0)

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    tb.start()

    tb.wait()


if __name__ == '__main__':
    main()
